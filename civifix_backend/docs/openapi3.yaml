openapi: 3.1.0
info:
  title: CiviFix API
  version: 1.0.0
  description: |
    OpenAPI 3.1 specification for the CiviFix civic engagement platform.
    Most endpoints require JWT bearer authentication.
servers:
  - url: https://api.civifix.example.com
    description: Production
  - url: http://localhost:8000
    description: Local development

security:
  - bearerAuth: []

tags:
  - name: Auth
  - name: Issues
  - name: Comments
  - name: Votes
  - name: Users

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    IssueId:
      name: id
      in: path
      required: true
      schema:
        type: integer
      description: Issue ID
    Page:
      name: page
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
    Limit:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10
    Category:
      name: category
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/IssueCategory'
    Status:
      name: status
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/IssueStatus'

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          example: Validation error
        message:
          type: string
          example: Email already exists
      required: [error, message]

    Pagination:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        total_pages:
          type: integer
          example: 10
        total_items:
          type: integer
          example: 100
        items_per_page:
          type: integer
          example: 10

    UserPublic:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: john@example.com
        full_name:
          type: string
          example: John Doe
        phone:
          type: string
          example: +1234567890
        address:
          type: string
          nullable: true
          example: 456 Oak St, City, State
        created_at:
          type: string
          format: date-time
          example: 2024-01-15T10:30:00Z
        updated_at:
          type: string
          format: date-time
          nullable: true
      required: [id, username, email, full_name]

    AuthToken:
      type: string
      description: JWT access token
      example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    Location:
      type: object
      properties:
        address:
          type: string
          example: 123 Main St, City, State
        latitude:
          type: number
          format: float
          example: 40.7128
        longitude:
          type: number
          format: float
          example: -74.006
      required: [address, latitude, longitude]

    IssueCategory:
      type: string
      enum: [road_maintenance, street_lighting, waste_management, water_drainage, public_safety, parks_recreation, traffic_signals, sidewalks, other]

    IssueStatus:
      type: string
      enum: [open, in_progress, resolved, closed]

    IssuePriority:
      type: string
      enum: [low, medium, high, urgent]

    Issue:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: Pothole on Main Street
        description:
          type: string
          example: Large pothole causing traffic issues
        category:
          $ref: '#/components/schemas/IssueCategory'
        status:
          $ref: '#/components/schemas/IssueStatus'
        priority:
          $ref: '#/components/schemas/IssuePriority'
        location:
          $ref: '#/components/schemas/Location'
        images:
          type: array
          items:
            type: string
            description: Image URL or identifier
          example: [image1.jpg, image2.jpg]
        author_id:
          type: integer
          example: 1
        assigned_to:
          type: string
          nullable: true
        vote_count:
          type: integer
          example: 5
        created_at:
          type: string
          format: date-time
          example: 2024-01-15T10:30:00Z
        updated_at:
          type: string
          format: date-time
          example: 2024-01-15T10:30:00Z
      required: [id, title, description, category, status, priority, location, author_id, vote_count, created_at]

    IssueCreate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        category:
          $ref: '#/components/schemas/IssueCategory'
        priority:
          $ref: '#/components/schemas/IssuePriority'
        location:
          $ref: '#/components/schemas/Location'
        images:
          type: array
          items:
            type: string
      required: [title, description, category, priority, location]
      example:
        title: Pothole on Main Street
        description: Large pothole causing traffic issues
        category: road_maintenance
        priority: medium
        location:
          address: 123 Main St, City, State
          latitude: 40.7128
          longitude: -74.006
        images: [image1.jpg, image2.jpg]

    IssueStatusUpdate:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/IssueStatus'
        update_message:
          type: string
          example: Work has begun on this issue
      required: [status]

    Comment:
      type: object
      properties:
        id:
          type: integer
          example: 1
        content:
          type: string
          example: I've also noticed this issue. It's getting worse daily.
        issue_id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 2
        user:
          type: object
          nullable: true
          properties:
            username:
              type: string
              example: janedoe
            full_name:
              type: string
              example: Jane Doe
        created_at:
          type: string
          format: date-time
          example: 2024-01-15T11:00:00Z
        updated_at:
          type: string
          format: date-time
          nullable: true
      required: [id, content, issue_id, user_id, created_at]

    CommentCreate:
      type: object
      properties:
        content:
          type: string
      required: [content]
      example:
        content: "I've also noticed this issue. It's getting worse daily."

    Vote:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        issue_id:
          type: integer
        created_at:
          type: string
          format: date-time

    AuthRegisterRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        full_name:
          type: string
        phone:
          type: string
      required: [username, email, password, full_name, phone]
      example:
        username: johndoe
        email: john@example.com
        password: securepassword123
        full_name: John Doe
        phone: "+1234567890"

    AuthRegisterResponse:
      type: object
      properties:
        message:
          type: string
          example: User registered successfully
        user:
          $ref: '#/components/schemas/UserPublic'
        token:
          $ref: '#/components/schemas/AuthToken'
      required: [message, user, token]

    AuthLoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      required: [email, password]
      example:
        email: john@example.com
        password: securepassword123

    AuthLoginResponse:
      type: object
      properties:
        message:
          type: string
          example: Login successful
        user:
          $ref: '#/components/schemas/UserPublic'
        token:
          $ref: '#/components/schemas/AuthToken'
      required: [message, user, token]

    IssuesListResponse:
      type: object
      properties:
        issues:
          type: array
          items:
            $ref: '#/components/schemas/Issue'
        pagination:
          $ref: '#/components/schemas/Pagination'

    IssueSingleResponse:
      type: object
      properties:
        issue:
          $ref: '#/components/schemas/Issue'

    CommentsListResponse:
      type: object
      properties:
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'

    UserProfileResponse:
      type: object
      properties:
        user:
          type: object
          properties:
            id:
              type: integer
            username:
              type: string
            full_name:
              type: string
            created_at:
              type: string
              format: date-time
            issues_created:
              type: integer
            issues_voted:
              type: integer
          required: [id, username, full_name, created_at]

paths:
  /api/auth/register:
    post:
      tags: [Auth]
      summary: Register a new user
      description: Creates a new user account
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthRegisterResponse'
        '400':
          description: Registration failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/login:
    post:
      tags: [Auth]
      summary: Authenticate user
      description: Authenticates user and returns access token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthLoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/issues:
    post:
      tags: [Issues]
      summary: Create issue
      description: Report a new civic issue
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueCreate'
      responses:
        '201':
          description: Issue created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Issue created successfully
                  issue:
                    $ref: '#/components/schemas/Issue'
        '400':
          description: Issue creation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags: [Issues]
      summary: Get all issues (paginated)
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Category'
        - $ref: '#/components/parameters/Status'
      responses:
        '200':
          description: List of issues
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuesListResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/issues/{id}:
    get:
      tags: [Issues]
      summary: Get single issue
      parameters:
        - $ref: '#/components/parameters/IssueId'
      responses:
        '200':
          description: Issue details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueSingleResponse'
        '404':
          description: Issue not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/issues/{id}/status:
    put:
      tags: [Issues]
      summary: Update issue status
      description: Update the status of an issue (admin/government users)
      parameters:
        - $ref: '#/components/parameters/IssueId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueStatusUpdate'
      responses:
        '200':
          description: Issue status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Issue status updated successfully
                  issue:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      status:
                        $ref: '#/components/schemas/IssueStatus'
                      updated_at:
                        type: string
                        format: date-time
                        example: 2024-01-16T09:15:00Z
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/issues/{id}/vote:
    post:
      tags: [Votes]
      summary: Vote on issue
      parameters:
        - $ref: '#/components/parameters/IssueId'
      requestBody:
        required: false
      responses:
        '201':
          description: Vote added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Vote added successfully
                  vote_count:
                    type: integer
                    example: 6
        '409':
          description: Duplicate vote
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags: [Votes]
      summary: Remove vote from issue
      parameters:
        - $ref: '#/components/parameters/IssueId'
      responses:
        '200':
          description: Vote removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Vote removed successfully
                  vote_count:
                    type: integer
                    example: 5
        '404':
          description: Vote not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/issues/{id}/comments:
    post:
      tags: [Comments]
      summary: Add comment to issue
      parameters:
        - $ref: '#/components/parameters/IssueId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentCreate'
      responses:
        '201':
          description: Comment added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Comment added successfully
                  comment:
                    $ref: '#/components/schemas/Comment'
        '400':
          description: Comment creation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags: [Comments]
      summary: Get comments for issue
      parameters:
        - $ref: '#/components/parameters/IssueId'
      responses:
        '200':
          description: List of comments for the issue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentsListResponse'
        '404':
          description: Issue not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/{id}:
    get:
      tags: [Users]
      summary: Get user profile
      description: Retrieve public profile information
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/profile:
    put:
      tags: [Users]
      summary: Update own profile
      description: Update authenticated user's profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                full_name:
                  type: string
                phone:
                  type: string
                address:
                  type: string
              example:
                full_name: John Smith
                phone: "+1234567890"
                address: 456 Oak St, City, State
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Profile updated successfully
                  user:
                    $ref: '#/components/schemas/UserPublic'
        '400':
          description: Invalid profile data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/issues/search:
    get:
      tags: [Issues]
      summary: Search issues
      description: Search issues by keyword, with optional filters
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
          description: Search query
        - $ref: '#/components/parameters/Category'
        - $ref: '#/components/parameters/Status'
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Issue'
                  total_results:
                    type: integer
                    example: 1
        '400':
          description: Missing query parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
